/*!!!
section: Grid
description: |
  The grid system is inspired by the [CSS Wizardry Grid](https://github.com/csswizardry/csswizardry-grids). The following changes have been made:

  - now adheres to the TWG naming convention
  - flexible gutter sizes based on the breakpoint
  - no markup fix or word-spacing fix needed
  - includes the `large` breakpoint
  - more granularity (ie. .grid-3of11 is now possible)
  - variable number of columns (ie. 16 column grids now possible)
jade: |
  .grid.grid--middle.grid--rev
    - for(var i=1; i<=3; i++)
      .grid-1of4.grid-1of2--portable
        .guidedog grid #{i}
    .grid-1of4.grid-1of2--portable
      .guidedog lorem2

  .u-spacer2

  .grid.u-spacer1
    .grid-1of3
      .guidedog Palm
    .grid-1of3
      .guidedog Lap
    .grid-1of3
      .guidedog Desk
  .grid.u-spacer1
    .grid-2of3
      .guidedog Portable
  .grid
    .grid-1of3
    .grid-2of3
      .guidedog Large
*/

baseFontSize := 16px
columns := 12
breakpoints := {
  large: {breakpoint: '(min-width: 481px)', gutter: size(2)},
  desk: {breakpoint: '(min-width: 1024px)', gutter: size(3)},
  lap: {breakpoint: '(min-width: 481px) and (max-width: 1023px)', gutter: size(2)},
  portable: {breakpoint: '(max-width: 1023px)', gutter: size(2)},
  palm: {breakpoint: '(max-width: 480px)', gutter: size(1)}
}

/*!!!
section: Media Query
description: To style elements at different screen sizes we use a function [i.e. +media(large)] to call the media query and pass to it a block with the new styling.
*/
media(bp)
  for key, value in breakpoints
    if key == bp
      @media value.breakpoint
        {block}


/*!!!
section: Container
description: The container class provides a maximum width of 1024px.
*/
// .container
//   max-width: 1024px
//   margin: 0 auto
//   +media(lap)
//     padding: 0 size(2)
//   +media(palm)
//     padding: 0 size(1)

.grid
  font-size: 0
  > *
    font-size: baseFontSize
    display: inline-block
    box-sizing: border-box
    vertical-align: top
  for key, value in breakpoints
    @media value.breakpoint
      margin-left: value.gutter * -1
      > *
        padding-left: value.gutter

replicate(selector)
  {selector}
    {block}
  for key, value in breakpoints
    @media value.breakpoint
      {selector}--{key}
        {block}

// grid modifiers
+replicate('.grid--middle')
  > *
    vertical-align: middle

+replicate('.grid--bottom')
  > *
    vertical-align: bottom

+replicate('.grid--rev')
  direction rtl
  text-align left
  > *
    direction ltr
    text-align left

// define grid items
for column in (1..columns)
  for num in (1..column)
    .grid-{num}of{column}
      width: (num/column) * 100%

// define breakpoint grid items
for key, value in breakpoints
  @media value.breakpoint
    for column in (1..columns)
      for num in (1..column)
        .grid-{num}of{column}--{key}
          width: (num/column) * 100%
